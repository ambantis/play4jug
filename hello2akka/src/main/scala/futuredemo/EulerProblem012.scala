package futuredemo

/**
  * Highly divisible triangular number
  *
  * The sequence of triangle numbers is generated by adding the natural numbers.
  * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
  * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  * We can see that 28: 1, 2, 4, 7, 14, 28 is the first triangle number to have
  * over five divisors. What is the value of the first triangle number to have
  * over five hundred divisors?

 * User: Alexandros Bantis
 * Date: 3/7/13
 * Time: 8:13 PM
 */
object EulerProblem012 {

  def triangleNumber(n: Int): Int = (1 to n).sum

  def calcDivisors(n: Int): Int = {
    val divisors: IndexedSeq[Int] =
      for {
        i <- 1 to Math.sqrt(n).toInt
        if n % i == 0
        amt = 2
      } yield amt
    divisors.sum
  }

  lazy val triNumbers = Stream.from(1).map(x => triangleNumber(x))

  def getNaturalNumbersWith(divisors: Int): (Int, Double) = {
    val start: Double = System.currentTimeMillis()
    val result: Int = triNumbers.dropWhile(x => calcDivisors(x) <= divisors).head
    val elaspsedTime = (System.currentTimeMillis() - start) / 1000.0
    (result, elaspsedTime)
  }
}

